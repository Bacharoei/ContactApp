import React, { useState, useEffect, useCallback } from 'react'
import { Modal, Button } from "react-bootstrap";
import validate from './validationForm'

const PersonForm = ({ handleClose, showModal, id, name, company, phone, address, mode, changes }) => {
    const [formData, setFormData] = useState({ id, name, company, phone, address })

    const [errors, setErrors] = useState({});

    const handleFormChange = e => {
        setFormData({ ...formData, [e.target.name]: e.target.value })

    };

    useEffect(() => {
        // return clean up function
        return () => {
            if (!showModal) {
                setFormData({ id: "", name: "", company: "", phone: "", address: "" })
            }
        }
    }, [showModal])

    const saveForm = useCallback(
        () => {
            changes(formData)
            handleClose(true)

        },
        [changes, formData, handleClose],
    )

    useEffect(() => {
        setFormData({ id, name, company, phone, address })
    }, [id, name, company, phone, address])

    // useEffect(() => {
    //     console.log('1');
    //     let data = validate(formData);
    //     console.log('data', data);
    //     if (Object.values(data).length === 0) {
    //         saveForm();
    //     }
    // }, [formData, saveForm])


    const onSubmit = useCallback(
        (e) => {
            e.preventDefault();
            const validateErrors = validate(formData);
            if (Object.values(validateErrors).length === 0) {
                saveForm();
            } else {
                setErrors(validateErrors);
            }
        },
        [formData, saveForm],
    )


    return (
        <Modal show={showModal} onHide={handleClose}>
            <Modal.Header closeButton>
                <Modal.Title>{mode === "edit" ? "Edit" : "Add"} Person</Modal.Title>
            </Modal.Header>
            <Modal.Body>
                <form className="form">
                    <label htmlFor="name">{errors.name ? errors.name : name} </label>
                    <input type="text" placeholder=" * name" name="name" value={formData.name} onChange={handleFormChange} />


                    <label htmlFor="company">Company </label>
                    <input type="text" placeholder=" * company" name="company" value={formData.company} onChange={handleFormChange} />
                    {errors.company && <p className="form-input-error">{errors.company}</p>}

                    <label htmlFor="Phone">Phone </label>
                    <input type="text" placeholder=" * Phone" name="phone" value={formData.phone} onChange={handleFormChange} />
                    {errors.phone && <p className="form-input-error">{errors.phone}</p>}
                    <label htmlFor="address">Address </label>
                    <input type="text" placeholder=" * Address" name="address" value={formData.address} onChange={handleFormChange} />
                    {errors.address && <p className="form-input-error">{errors.address}</p>}

                </form>
            </Modal.Body>
            <Modal.Footer>
                {mode === "edit" ? <>
                    <Button variant="secondary" onClick={handleClose}>
                        Close
                </Button>
                    <Button variant="primary" type="submit" onClick={onSubmit}  >
                        Edit
                </Button>
                </> :
                    <>
                        <Button variant="secondary" onClick={handleClose}>Close</Button>
                        <Button variant="primary" onClick={(e) => onSubmit(e)}> Add </Button>
                    </>}
            </Modal.Footer>
        </Modal>

    )
}

export default PersonForm;
